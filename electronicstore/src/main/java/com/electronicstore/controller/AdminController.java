package com.electronicstore.controller;

import java.security.Principal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.electronicbackend.dao.CategoryDAO;
import com.electronicbackend.dao.ProductDAO;
import com.electronicbackend.dao.UserDAO;
import com.electronicbackend.dto.Category;
import com.electronicbackend.dto.Product;
import com.electronicbackend.dto.User;

@Controller
public class AdminController {
	@Autowired
	MailSender mailsender;

	@Autowired
	ProductDAO productDAO;

	@Autowired
	UserDAO userDAO;

	@Autowired
	CategoryDAO categoryDAO;

	@RequestMapping(value = { "/admin/manage/supplier" })
	public ModelAndView manageSupplier(Principal principal) {
		ModelAndView mv = new ModelAndView("page");
		mv.addObject("title", "Manage Supplier");
		mv.addObject("userClickManageSupplier", true);

		// passing supplier details
		List<User> suppliers = userDAO.getUserByRole("supplier");
		mv.addObject("suppliers", suppliers);

		// passing user details
		String username = principal.getName();
		User user = userDAO.getUserByUsername(username);
		mv.addObject("user", user);
		return mv;
	}

	@RequestMapping(value = { "/admin/manage/category" })
	public ModelAndView manageCategory(Principal principal) {
		ModelAndView mv = new ModelAndView("page");
		mv.addObject("title", "Manage Category");
		mv.addObject("userClickManageCategory", true);
		// Passing Category Details
		List<Category> categories = categoryDAO.getCategoryDetails();
		mv.addObject("categories", categories);

		// passing user details
		String username = principal.getName();
		User user = userDAO.getUserByUsername(username);
		mv.addObject("user", user);

		return mv;
	}

	@RequestMapping(value = { "/add/category" })
	public ModelAndView addCategory(@RequestParam("categoryname") String categoryname) {
		ModelAndView mv = new ModelAndView("redirect:/admin/manage/category");
		mv.addObject("title", "Manage Category");
		mv.addObject("userClickManageCategory", true);
		Category category = new Category();
		category.setCategoryName(categoryname);
		category.setActive(true);
		categoryDAO.insertCategory(category);
		return mv;
	}

	@RequestMapping(value = { "/deletecategory" })
	public ModelAndView deleteCategory(@RequestParam("id") int id) {
		ModelAndView mv = new ModelAndView("redirect:/admin/manage/category");
		mv.addObject("title", "Manage Category");
		mv.addObject("userClickManageCategory", true);
		Category category = categoryDAO.getCategoryById(id);
		categoryDAO.deleteCategory(category);
		return mv;
	}

	@RequestMapping(value = { "/admin/manage/activatecategory/{id}" }, method = RequestMethod.POST)
	@ResponseBody
	public String activateCategory(@PathVariable("id") int id) {

		Category category = categoryDAO.getCategoryById(id);
		boolean active = category.isActive();
		category.setActive(!active);
		categoryDAO.updateCategory(category);
		return (active) ? "You have sucessfully deactivated the Category"
				: "You have sucessfully activated the Category";

	}

	@RequestMapping(value = { "add/supplier" })
	public ModelAndView addSupplier(@RequestParam("username") String username,
			@RequestParam("firstname") String firstname, @RequestParam("lastname") String lastname,
			@RequestParam("number") String number, @RequestParam("email") String email) {
		ModelAndView mv = new ModelAndView("redirect:/admin/manage/supplier");
		String password = "P*1" + firstname + lastname + "#2";
		SimpleMailMessage mail = new SimpleMailMessage();
		mail.setFrom("theelectronicstore29@gmail.com");
		mail.setTo(email);
		mail.setSubject("Confirmation Mail");
		mail.setText("Dear " + firstname + " " + lastname + ",\n\nyour username is: " + username
				+ "\nAnd your password is: " + password
				+ "\nthis message is generated by the system so please don't relpy to this email\n\nThanks & Regards\n The Electronic Store");
		try {
			mailsender.send(mail);
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Can't send the message");
		}
		User user = new User();
		user.setActive(true);
		user.setRole("supplier");
		user.setUsername(username);
		user.setFirstName(firstname);
		user.setLastName(lastname);
		user.setEmail(email);
		user.setPassword(password);
		user.setContactNumber(number);
		userDAO.insertUser(user);
		return mv;
	}

	@RequestMapping(value = { "/deletesupplier" })
	public ModelAndView deleteSupplier(@RequestParam("id") int id) {
		ModelAndView mv = new ModelAndView("redirect:/admin/manage/supplier");
		User user = userDAO.getUserById(id);
		userDAO.deleteUser(user);
		return mv;
	}

	@RequestMapping(value = { "/admin/manage/products" })
	public ModelAndView manageProducts(Principal principal) {
		ModelAndView mv = new ModelAndView("page");
		mv.addObject("title", "Manage Products");
		mv.addObject("userClickManageProducts", true);
		// passing product model
		Product product = new Product();
		mv.addObject("product", product);

		// Passing Category Details
		List<Category> categories = categoryDAO.getActiveCategoryDetails();
		mv.addObject("categories", categories);

		// passing all the product Details
		List<Product> products = productDAO.getProductDetails();
		mv.addObject("products", products);

		// passing user details
		String username = principal.getName();
		User user = userDAO.getUserByUsername(username);
		mv.addObject("user", user);

		return mv;
	}

	@RequestMapping(value = { "/admin/manage/activateproduct/{id}" }, method = RequestMethod.POST)
	@ResponseBody
	public String activateProduct(@PathVariable("id") int id) {

		Product product = productDAO.getProductById(id);
		boolean active = product.isActive();
		product.setActive(!active);
		productDAO.updateProduct(product);
		return (active) ? "You have sucessfully deactivated the Product" : "You have sucessfully activated the Product";

	}

	@RequestMapping(value = { "/admin/manage/activatesupplier/{id}" }, method = RequestMethod.POST)
	@ResponseBody
	public String activatesupplier(@PathVariable("id") int id) {

		User user = userDAO.getUserById(id);
		boolean active = user.isActive();
		user.setActive(!active);
		userDAO.updateUser(user);
		return (active) ? "You have sucessfully deactivated the Supplier"
				: "You have sucessfully activated the Supplier";

	}

}
